{"version":3,"file":"functions.js","mappings":"yBAgFAA,gBAAgBC,UAAU,MAvEnB,SAAaC,EAAeC,GACjC,OAAOD,EAAQC,CACjB,GAsEAH,gBAAgBC,UAAU,QA/DnB,SAAeG,GACpB,IAAMC,EAAQC,YAAY,WACxB,IAAMC,GAcD,IAAIC,MAAOC,qBAbhBL,EAAWM,UAAUH,EACvB,EAAG,KAEHH,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,GAuDAL,gBAAgBC,UAAU,YAvCnB,SACLY,EACAT,GAEA,IAAIU,EAAS,EACPT,EAAQC,YAAY,WACxBQ,GAAUD,EACVT,EAAWM,UAAUI,EACvB,EAAG,KAEHV,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,GA2BAL,gBAAgBC,UAAU,MAnBnB,SAAoBc,GAGzB,OAFAC,QAAQC,IAAIF,GAELA,CACT,GAgBAf,gBAAgBC,UAAU,MARnB,SAAaiB,GAClB,OAAOA,EAAOC,OAAOC,OAAO,SAACC,EAAKC,GAAG,OAAKD,EAAMC,CAAG,EAAE,EACvD,E","sources":["webpack://excel-custom-functions/./src/functions/functions.ts"],"sourcesContent":["/* global clearInterval, console, CustomFunctions, setInterval */\n\n/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nexport function add(first: number, second: number): number {\n  return first + second;\n}\n\n/**\n * Displays the current time once a second.\n * @customfunction\n * @param invocation Custom function handler\n */\nexport function clock(invocation: CustomFunctions.StreamingInvocation<string>): void {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time.\n * @returns String with the current time formatted for the current locale.\n */\nexport function currentTime(): string {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param incrementBy Amount to increment\n * @param invocation Custom function handler\n */\nexport function increment(\n  incrementBy: number,\n  invocation: CustomFunctions.StreamingInvocation<number>\n): void {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param message String to write.\n * @returns String to write.\n */\nexport function logMessage(message: string): string {\n  console.log(message);\n\n  return message;\n}\n\n/**\n * Returns the sum of a range of numbers.\n * @customfunction AGG\n * @param values The range of numbers to sum.\n * @returns The sum of the numbers in the range.\n */\nexport function AGG(values: number[][]): number {\n  return values.flat().reduce((acc, val) => acc + val, 0);\n}\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"AGG\", AGG);"],"names":["CustomFunctions","associate","first","second","invocation","timer","setInterval","time","Date","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy","result","message","console","log","values","flat","reduce","acc","val"],"sourceRoot":""}